/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package freefirfiltergenerator;

import FreeFirFilterGenerator.Filter.BandPassFilter;
import FreeFirFilterGenerator.Filter.FilterTypeEnum;
import FreeFirFilterGenerator.Filter.LowPassFilter;
import FreeFirFilterGenerator.Filter.HighPassFilter;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.FileWriter;
import java.io.File;
import java.io.BufferedWriter;
import java.io.IOException;
import java.text.ParseException;
import java.util.Vector;
import java.util.prefs.Preferences;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Jean
 */
public class FreeFirFilterGeneratorForm extends javax.swing.JFrame {
    private final Preferences prefs = Preferences.userRoot();
    private Vector<String> windowsList = new Vector<>(0);
    
    public static boolean DEBUG_MODE = false;
    /**
     * Creates new form FreeFirFilterGeneratorForm
     */
    public FreeFirFilterGeneratorForm() {
        if(DEBUG_MODE) System.out.println("Launching...");
        
        windowsList.add("Rectangular (none)");
        windowsList.add("Triangular");
        windowsList.add("Welch");
        windowsList.add("Hanning");
        windowsList.add("Hamming");
        windowsList.add("Blackman");
        windowsList.add("Nuttall");
        windowsList.add("Blackman-Nuttall");
        windowsList.add("Blackman-Harris");
        windowsList.add("Flat top");
        
        if(DEBUG_MODE) {
            windowsList.add("Gaussian*");
            windowsList.add("Tukey*");
            windowsList.add("-Planck-Taper*");
            windowsList.add("-DPSS/Slepian*");
            windowsList.add("-Kaiser*");
            windowsList.add("-Dolph–Chebyshev*");
            windowsList.add("-Ultraspherical*");
            windowsList.add("-Exponential/Poisson*");
            windowsList.add("-Bartlett–Hann*");
            windowsList.add("-Planck–Bessel*");
            windowsList.add("-Hann-Poisson*");
            windowsList.add("-Sinc/Lanczos*");
        }
        
        initComponents();
        loadSettings();
        checkFiltersMaxFcValues();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jComboBox1 = new javax.swing.JComboBox();
        jSpinner1 = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jLabelSamplingFrequency = new javax.swing.JLabel();
        jComboBoxSamplingFrequency = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabelFilterType = new javax.swing.JLabel();
        jComboBoxFilterType1 = new javax.swing.JComboBox();
        jComboBoxFilterType2 = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jPanelHighPass = new javax.swing.JPanel();
        jLabelHighPassFc = new javax.swing.JLabel();
        jSpinnerHighPassFc = new javax.swing.JSpinner();
        jLabelHighPassOrder = new javax.swing.JLabel();
        jSpinnerHighPassOrder = new javax.swing.JSpinner();
        jLabelHighPassFilterPhase = new javax.swing.JLabel();
        jComboBoxHighPassFilterPhase = new javax.swing.JComboBox();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jPanelLowPass = new javax.swing.JPanel();
        jLabelLowPassFc = new javax.swing.JLabel();
        jSpinnerLowPassFc = new javax.swing.JSpinner();
        jLabelLowPassOrder = new javax.swing.JLabel();
        jSpinnerLowPassOrder = new javax.swing.JSpinner();
        jLabelLowPassFilterPhase = new javax.swing.JLabel();
        jComboBoxLowPassFilterPhase = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabelFilterLength = new javax.swing.JLabel();
        jSpinnerFilterLength = new javax.swing.JSpinner();
        jCheckBoxFilterLength = new javax.swing.JCheckBox();
        jLabelLatency1 = new javax.swing.JLabel();
        jSpinnerFilterGroupDelay = new javax.swing.JSpinner();
        jCheckBoxFilterGroupDelay = new javax.swing.JCheckBox();
        jLabelLatency = new javax.swing.JLabel();
        jLabelConvolutionLatencyValue = new javax.swing.JLabel();
        jLabelLatencyUnit = new javax.swing.JLabel();
        jLabelLatency2 = new javax.swing.JLabel();
        jLabelTotalLatencyValue = new javax.swing.JLabel();
        jLabelLatencyUnit1 = new javax.swing.JLabel();
        jLabelWindowing = new javax.swing.JLabel();
        jComboBoxWindowing = new javax.swing.JComboBox();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jLabel2 = new javax.swing.JLabel();
        jSpinnerWindowParam = new javax.swing.JSpinner();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuSaveFilterImpulseResponse = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuExit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuAbout = new javax.swing.JMenu();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Free-FIR-Filter-Generator");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3.setLayout(new java.awt.GridLayout(2, 3, 10, 10));

        jLabelSamplingFrequency.setLabelFor(jComboBoxSamplingFrequency);
        jLabelSamplingFrequency.setText("Sampling frequency");
        jPanel3.add(jLabelSamplingFrequency);

        jComboBoxSamplingFrequency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "44100", "48000", "88200", "96000", "192000" }));
        jComboBoxSamplingFrequency.setNextFocusableComponent(jComboBoxFilterType1);
        jComboBoxSamplingFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSamplingFrequencyActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBoxSamplingFrequency);

        jLabel1.setText("Hz");
        jPanel3.add(jLabel1);

        jLabelFilterType.setLabelFor(jComboBoxFilterType1);
        jLabelFilterType.setText("Filter type");
        jPanel3.add(jLabelFilterType);

        jComboBoxFilterType1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Allpass", "Lowpass", "Highpass", "Bandpass" }));
        jComboBoxFilterType1.setNextFocusableComponent(jComboBoxFilterType2);
        jComboBoxFilterType1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilterType1ActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBoxFilterType1);

        jComboBoxFilterType2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Linkwitz-Riley", "Butterworth" }));
        jComboBoxFilterType2.setNextFocusableComponent(jSpinnerHighPassFc);
        jComboBoxFilterType2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilterType2ActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBoxFilterType2);

        jPanel4.setLayout(new java.awt.GridLayout(1, 3, 10, 10));

        jPanelHighPass.setLayout(new java.awt.GridLayout(3, 0, 10, 10));

        jLabelHighPassFc.setText("Highpass fc");
        jLabelHighPassFc.setEnabled(false);
        jPanelHighPass.add(jLabelHighPassFc);

        jSpinnerHighPassFc.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), Double.valueOf(1.0d), null, Double.valueOf(1.0d)));
        jSpinnerHighPassFc.setEnabled(false);
        jSpinnerHighPassFc.setNextFocusableComponent(jSpinnerLowPassFc);
        jSpinnerHighPassFc.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerHighPassFcStateChanged(evt);
            }
        });
        jPanelHighPass.add(jSpinnerHighPassFc);

        jLabelHighPassOrder.setText("Highpass order");
        jLabelHighPassOrder.setEnabled(false);
        jPanelHighPass.add(jLabelHighPassOrder);

        jSpinnerHighPassOrder.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerHighPassOrder.setEnabled(false);
        jSpinnerHighPassOrder.setNextFocusableComponent(jSpinnerLowPassOrder);
        jPanelHighPass.add(jSpinnerHighPassOrder);

        jLabelHighPassFilterPhase.setText("Highpass phase");
        jLabelHighPassFilterPhase.setEnabled(false);
        jPanelHighPass.add(jLabelHighPassFilterPhase);

        jComboBoxHighPassFilterPhase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Linear", "Minimal" }));
        jComboBoxHighPassFilterPhase.setEnabled(false);
        jComboBoxHighPassFilterPhase.setNextFocusableComponent(jComboBoxLowPassFilterPhase);
        jPanelHighPass.add(jComboBoxHighPassFilterPhase);

        jPanel4.add(jPanelHighPass);
        jPanel4.add(filler5);

        jPanelLowPass.setLayout(new java.awt.GridLayout(3, 0, 10, 10));

        jLabelLowPassFc.setText("Lowpass fc");
        jLabelLowPassFc.setEnabled(false);
        jPanelLowPass.add(jLabelLowPassFc);

        jSpinnerLowPassFc.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), Double.valueOf(1.0d), null, Double.valueOf(1.0d)));
        jSpinnerLowPassFc.setEnabled(false);
        jSpinnerLowPassFc.setNextFocusableComponent(jSpinnerHighPassOrder);
        jSpinnerLowPassFc.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerLowPassFcStateChanged(evt);
            }
        });
        jPanelLowPass.add(jSpinnerLowPassFc);

        jLabelLowPassOrder.setText("Lowpass order");
        jLabelLowPassOrder.setEnabled(false);
        jPanelLowPass.add(jLabelLowPassOrder);

        jSpinnerLowPassOrder.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinnerLowPassOrder.setEnabled(false);
        jSpinnerLowPassOrder.setNextFocusableComponent(jComboBoxHighPassFilterPhase);
        jPanelLowPass.add(jSpinnerLowPassOrder);

        jLabelLowPassFilterPhase.setText("Lowpass phase");
        jLabelLowPassFilterPhase.setEnabled(false);
        jPanelLowPass.add(jLabelLowPassFilterPhase);

        jComboBoxLowPassFilterPhase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Linear", "Minimal" }));
        jComboBoxLowPassFilterPhase.setEnabled(false);
        jComboBoxLowPassFilterPhase.setNextFocusableComponent(jSpinnerFilterLength);
        jPanelLowPass.add(jComboBoxLowPassFilterPhase);

        jPanel4.add(jPanelLowPass);

        jPanel1.setLayout(new java.awt.GridLayout(6, 3));

        jLabelFilterLength.setLabelFor(jSpinnerFilterLength);
        jLabelFilterLength.setText("Filter length (in samples)");
        jPanel1.add(jLabelFilterLength);

        jSpinnerFilterLength.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(2), null, Integer.valueOf(1)));
        jSpinnerFilterLength.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSpinnerFilterLength.setNextFocusableComponent(jSpinnerFilterGroupDelay);
        jSpinnerFilterLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerFilterLengthStateChanged(evt);
            }
        });
        jSpinnerFilterLength.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSpinnerFilterLengthFocusGained(evt);
            }
        });
        jPanel1.add(jSpinnerFilterLength);

        jCheckBoxFilterLength.setText("auto suggest");
        jCheckBoxFilterLength.setEnabled(false);
        jPanel1.add(jCheckBoxFilterLength);

        jLabelLatency1.setLabelFor(jLabelConvolutionLatencyValue);
        jLabelLatency1.setText("Filter group delay (in samples)");
        jPanel1.add(jLabelLatency1);

        jSpinnerFilterGroupDelay.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        jSpinnerFilterGroupDelay.setNextFocusableComponent(jComboBoxWindowing);
        jSpinnerFilterGroupDelay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerFilterGroupDelayStateChanged(evt);
            }
        });
        jSpinnerFilterGroupDelay.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSpinnerFilterGroupDelayFocusGained(evt);
            }
        });
        jPanel1.add(jSpinnerFilterGroupDelay);

        jCheckBoxFilterGroupDelay.setText("auto suggest");
        jPanel1.add(jCheckBoxFilterGroupDelay);

        jLabelLatency.setLabelFor(jLabelConvolutionLatencyValue);
        jLabelLatency.setText("Convolution latency");
        jPanel1.add(jLabelLatency);

        jLabelConvolutionLatencyValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelConvolutionLatencyValue.setText("0");
        jPanel1.add(jLabelConvolutionLatencyValue);

        jLabelLatencyUnit.setText(" ms");
        jPanel1.add(jLabelLatencyUnit);

        jLabelLatency2.setLabelFor(jLabelConvolutionLatencyValue);
        jLabelLatency2.setText("Total latency");
        jPanel1.add(jLabelLatency2);

        jLabelTotalLatencyValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelTotalLatencyValue.setText("0");
        jPanel1.add(jLabelTotalLatencyValue);

        jLabelLatencyUnit1.setText(" ms");
        jPanel1.add(jLabelLatencyUnit1);

        jLabelWindowing.setLabelFor(jComboBoxWindowing);
        jLabelWindowing.setText("Windowing");
        jPanel1.add(jLabelWindowing);

        jComboBoxWindowing.setModel(new javax.swing.DefaultComboBoxModel(windowsList));
        jComboBoxWindowing.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxWindowingItemStateChanged(evt);
            }
        });
        jPanel1.add(jComboBoxWindowing);
        jPanel1.add(filler2);

        jLabel2.setText("Window parameter");
        jPanel1.add(jLabel2);

        jSpinnerWindowParam.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.0d, 1.0d, 0.05d));
        jSpinnerWindowParam.setEnabled(false);
        jPanel1.add(jSpinnerWindowParam);
        jPanel1.add(filler4);

        jMenuFile.setText("File");
        jMenuFile.setDelay(10);
        jMenuFile.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jMenuFileStateChanged(evt);
            }
        });

        jMenuSaveFilterImpulseResponse.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSaveFilterImpulseResponse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save-as-icon20.png"))); // NOI18N
        jMenuSaveFilterImpulseResponse.setText("Save filter impulse response");
        jMenuSaveFilterImpulseResponse.setPreferredSize(new java.awt.Dimension(341, 24));
        jMenuSaveFilterImpulseResponse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveFilterImpulseResponseActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuSaveFilterImpulseResponse);
        jMenuFile.add(jSeparator1);

        jMenuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/log-out-icon20.png"))); // NOI18N
        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuExit);

        jMenuBar1.add(jMenuFile);

        jMenu1.setText("Edit");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset-settings-icon-16x16.png"))); // NOI18N
        jMenuItem1.setText("reset to default values");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenuAbout.setText("About");
        jMenuBar1.add(jMenuAbout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(166, 166, 166))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxSamplingFrequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSamplingFrequencyActionPerformed
        checkFiltersMaxFcValues();
        setLatencyValues();
    }//GEN-LAST:event_jComboBoxSamplingFrequencyActionPerformed

    private void jComboBoxFilterType1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilterType1ActionPerformed
        String filterTypeString = this.jComboBoxFilterType1.getSelectedItem().toString().toLowerCase();
        if(filterTypeString.contains("allpass")) {
            setLowPassFilterEnabled(false);
            setHighPassFilterEnabled(false);
        }
        else if(filterTypeString.contains("highpass")) {
            setLowPassFilterEnabled(false);
            setHighPassFilterEnabled(true);
        }
        else if(filterTypeString.contains("lowpass")) {
            setLowPassFilterEnabled(true);
            setHighPassFilterEnabled(false);
        }
        else if(filterTypeString.contains("bandpass")) {
            setLowPassFilterEnabled(true);
            setHighPassFilterEnabled(true);
        }
        else {
            // Unknown filter type
        }
    }//GEN-LAST:event_jComboBoxFilterType1ActionPerformed

    private void jMenuSaveFilterImpulseResponseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveFilterImpulseResponseActionPerformed
        commitEditSpinners();
        
        JFileChooser fs = new JFileChooser();
        fs.setDialogTitle("Save filter impulse response");
        fs.setFileFilter(new FileNameExtensionFilter("Text file (.txt)", ".txt"));
        int result = fs.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION) {
            // Save the file
            try {
                    double[] impulse;
                    double hpFc = (double)this.jSpinnerHighPassFc.getValue();
                    double lpFc = (double)this.jSpinnerLowPassFc.getValue();
                    int samplingRate = Integer.parseInt(this.jComboBoxSamplingFrequency.getSelectedItem().toString());
                    int hpOrder = (int)this.jSpinnerHighPassOrder.getValue();
                    int lpOrder = (int)this.jSpinnerLowPassOrder.getValue();
                    
                    int filterLength = (int)this.jSpinnerFilterLength.getValue();
                    String filterType1String = this.jComboBoxFilterType1.getSelectedItem().toString().toLowerCase();
                    
                    FilterTypeEnum hpFilterType2, lpFilterType2;
                    String hpFilterType2String = this.jComboBoxFilterType2.getSelectedItem().toString();
                    if(hpFilterType2String.equals("Butterworth")) hpFilterType2 = FilterTypeEnum.BUTTERWORTH;
                    else if(hpFilterType2String.equals("Linkwitz-Riley")) hpFilterType2 = FilterTypeEnum.LINKWITZ_RILEY;
                    else hpFilterType2 = FilterTypeEnum.UNDEFINED;
                    
                    String lpFilterType2String = this.jComboBoxFilterType2.getSelectedItem().toString();
                    if(lpFilterType2String.equals("Butterworth")) lpFilterType2 = FilterTypeEnum.BUTTERWORTH;
                    else if(lpFilterType2String.equals("Linkwitz-Riley")) lpFilterType2 = FilterTypeEnum.LINKWITZ_RILEY;
                    else lpFilterType2 = FilterTypeEnum.UNDEFINED;
                    
                    if(filterType1String.contains("lowpass")) {
                        System.out.println("Saving lowpass filter :");
                        System.out.println("Fc = " + lpFc + " hz");
                        
                        impulse = (new LowPassFilter(filterLength, samplingRate, lpFc, lpOrder, lpFilterType2)).getImpulse();
                    }
                    else if(filterType1String.contains("highpass")) {
                        impulse = (new HighPassFilter(filterLength, samplingRate, hpFc, hpOrder, hpFilterType2)).getImpulse();
                    }
                    else if(filterType1String.contains("bandpass")) {
                        impulse = (new BandPassFilter(filterLength, samplingRate, hpFc, hpOrder, hpFilterType2, lpFc, lpOrder, lpFilterType2)).getImpulse();
                    }
                    else {
                        return;
                    }
                    
                    // Apply window if needed
                    String windowTypeString = this.jComboBoxWindowing.getSelectedItem().toString().toLowerCase();
                    
                    double[] window;
                    
                    if(windowTypeString.contains("rectangular")) {
                        window = Window.rectangular(impulse.length);
                    }
                    else if(windowTypeString.contains("triangular")) {
                        window = Window.triangular(impulse.length);
                    }
                    else if(windowTypeString.contains("welch")) {
                        window = Window.welch(impulse.length);
                    }
                    else if(windowTypeString.contains("hanning")) {
                        window = Window.hanning(impulse.length);
                    }
                    else if(windowTypeString.contains("hamming")) {
                        window = Window.hamming(impulse.length);
                    }
                    else if(windowTypeString.contains("blackman")) {
                        if(windowTypeString.contains("nuttall")) {
                            window = Window.blackman_nuttall(impulse.length);
                        }
                        else if(windowTypeString.contains("harris")) {
                            window = Window.blackman_harris(impulse.length);
                        }
                        else {
                            window = Window.blackman(impulse.length);
                        }
                    }
                    else if(windowTypeString.contains("nuttall")) {
                        window = Window.nuttall(impulse.length);
                    }
                    else if(windowTypeString.contains("flat top")) {
                        window = Window.flat_top(impulse.length);
                    }
                    else if(windowTypeString.contains("gaussian")) {
                        window = Window.gaussian(impulse.length, (double)this.jSpinnerWindowParam.getValue());
                    }
                    else if(windowTypeString.contains("tukey")) {
                        window = Window.tukey(impulse.length, (double)this.jSpinnerWindowParam.getValue());
                    }
                    else {
                        window = new double[impulse.length];
                        for(int i = 0; i < impulse.length; i++) {
                            window[i] = 0.0;
                        }
                    }
                    
                    for(int i = 0; i < impulse.length; i++) {
                        impulse[i] *= window[i];
                    }
                    
                    File file = fs.getSelectedFile();
                    if(!file.getName().contains(".")) {
                        file = new File(fs.getSelectedFile() + ".txt");
                    }
                    
                    // if file doesnt exists, then create it
                    if (!file.exists()) {
                            file.createNewFile();
                    }

                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    for(int i = 0; i < impulse.length; ++i) {
                        bw.write(Double.toString(impulse[i]));
                        bw.newLine();
                    }
                    bw.close();

                    System.out.println("Done");

            } catch (IOException e) {
                    e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jMenuSaveFilterImpulseResponseActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        exit();
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jSpinnerLowPassFcStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerLowPassFcStateChanged
        checkFiltersMaxFcValues();
    }//GEN-LAST:event_jSpinnerLowPassFcStateChanged

    private void jSpinnerHighPassFcStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerHighPassFcStateChanged
        checkFiltersMaxFcValues();
    }//GEN-LAST:event_jSpinnerHighPassFcStateChanged

    private void jMenuFileStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jMenuFileStateChanged
        commitEditSpinners();
    }//GEN-LAST:event_jMenuFileStateChanged

    private void jSpinnerFilterGroupDelayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerFilterGroupDelayStateChanged
        setLatencyValues();
    }//GEN-LAST:event_jSpinnerFilterGroupDelayStateChanged

    private void jComboBoxFilterType2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilterType2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxFilterType2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        prefs.putInt("jComboBoxSamplingFrequency", 0);
        
        prefs.putInt("jComboBoxFilterType1", 0);
        prefs.putInt("jComboBoxFilterType2", 0);
        
        prefs.putDouble("jSpinnerHighPassFc", 1.0);
        prefs.putInt("jSpinnerHighPassOrder", 1);
        prefs.putInt("jComboBoxHighPassFilterPhase", 0);
        
        prefs.putDouble("jSpinnerLowPassFc", 1.0);
        prefs.putInt("jSpinnerLowPassOrder", 1);
        prefs.putInt("jComboBoxLowPassFilterPhase", 0);
        
        prefs.putInt("jSpinnerFilterLength", 3);
        prefs.putBoolean("jCheckBoxFilterLength", false);
        prefs.putInt("jSpinnerFilterGroupDelay", 1);
        prefs.putBoolean("jCheckBoxFilterGroupDelay", true);

        prefs.putInt("jComboBoxWindowing", 0);
        prefs.putDouble("jSpinnerWindowParam", 0.5);
        
        loadSettings();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jSpinnerFilterLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerFilterLengthStateChanged
        SpinnerModel model = this.jSpinnerFilterGroupDelay.getModel();
        if(model instanceof SpinnerNumberModel)
        {
            int maxValue = (int) this.jSpinnerFilterLength.getValue();
            //int recommandedFilterLength = 1024;
            int recommandedGroupDelay = maxValue/2;
            ((SpinnerNumberModel)model).setMaximum(maxValue);
            
            if(this.jCheckBoxFilterGroupDelay.isSelected()) {
                this.jSpinnerFilterGroupDelay.setValue(recommandedGroupDelay);
            }
            if(maxValue <= (int)jSpinnerFilterGroupDelay.getValue()) {
                jSpinnerFilterGroupDelay.setValue(maxValue);
            }
        }
    }//GEN-LAST:event_jSpinnerFilterLengthStateChanged

    private void jComboBoxWindowingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxWindowingItemStateChanged
        
    }//GEN-LAST:event_jComboBoxWindowingItemStateChanged

    private void jSpinnerFilterLengthFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSpinnerFilterLengthFocusGained
       Object src = evt.getSource();
       //System.out.println("Focus gained for : " + src);

       if (src instanceof JSpinner) // sanity check
       {
            //System.out.println("... select all later");
            SwingUtilities.invokeLater(  new selectlater( (JSpinner) src )  );
       }
    }//GEN-LAST:event_jSpinnerFilterLengthFocusGained

    private void jSpinnerFilterGroupDelayFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSpinnerFilterGroupDelayFocusGained
       Object src = evt.getSource();
       //System.out.println("Focus gained for : " + src);

       if (src instanceof JSpinner) // sanity check
       {
            //System.out.println("... select all later");
            SwingUtilities.invokeLater(  new selectlater( (JSpinner) src )  );
       }
    }//GEN-LAST:event_jSpinnerFilterGroupDelayFocusGained

    private void checkFiltersMaxFcValues() {
        double hpFcValue = (double)jSpinnerHighPassFc.getValue();
        double lpFcValue = (double)jSpinnerLowPassFc.getValue();
        double fcMax = Double.parseDouble(jComboBoxSamplingFrequency.getSelectedItem().toString())/2.0;
        /*JComponent comp = this.jSpinnerFilterLength.getEditor();
        JFormattedTextField field = (JFormattedTextField) comp.getComponent(0);
        DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
        formatter.setCommitsOnValidEdit(true);*/
    
        // Set max fc values
        if(hpFcValue > fcMax) jSpinnerHighPassFc.setValue(fcMax);
        if(lpFcValue > fcMax) jSpinnerLowPassFc.setValue(fcMax);
    }
    
    private void setLatencyValues() {
        double samplingRate = Double.parseDouble(this.jComboBoxSamplingFrequency.getSelectedItem().toString());
        int filterLength = (int)this.jSpinnerFilterLength.getValue();
        int filterGroupDelay = (int)this.jSpinnerFilterGroupDelay.getValue();
        double convolutionLatency = (filterLength-1.0)*1000.0/(2.0*samplingRate);
        double totalLatency = filterGroupDelay*1000.0/(2.0*samplingRate) + convolutionLatency;
        this.jLabelConvolutionLatencyValue.setText(String.format("%1$,.4f", convolutionLatency));
        this.jLabelTotalLatencyValue.setText(String.format("%1$,.4f", totalLatency));
    }
    
    private void setLowPassFilterEnabled(boolean value) {
        this.jSpinnerLowPassFc.setEnabled(value);
        this.jSpinnerLowPassOrder.setEnabled(value);
        //this.jComboBoxLowPassFilterPhase.setEnabled(value);
        this.jLabelLowPassFc.setEnabled(value);
        this.jLabelLowPassOrder.setEnabled(value);
        //this.jLabelLowPassFilterPhase.setEnabled(value);
    }
    
    private void setHighPassFilterEnabled(boolean value) {
        this.jSpinnerHighPassFc.setEnabled(value);
        this.jSpinnerHighPassOrder.setEnabled(value);
        //this.jComboBoxHighPassFilterPhase.setEnabled(value);
        this.jLabelHighPassFc.setEnabled(value);
        this.jLabelHighPassOrder.setEnabled(value);
        //this.jLabelHighPassFilterPhase.setEnabled(value);
    }
    
    private void loadSettings() {
        this.jComboBoxSamplingFrequency.setSelectedIndex(prefs.getInt("jComboBoxSamplingFrequency",0));
        
        this.jComboBoxFilterType1.setSelectedIndex(prefs.getInt("jComboBoxFilterType1", 0));
        this.jComboBoxFilterType2.setSelectedIndex(prefs.getInt("jComboBoxFilterType2", 0));
        
        this.jSpinnerHighPassFc.setValue(prefs.getDouble("jSpinnerHighPassFc", 1));
        this.jSpinnerHighPassOrder.setValue(prefs.getInt("jSpinnerHighPassOrder",1));
        this.jComboBoxHighPassFilterPhase.setSelectedIndex(prefs.getInt("jComboBoxHighPassFilterPhase",0));
        
        this.jSpinnerLowPassFc.setValue(prefs.getDouble("jSpinnerLowPassFc", 1));
        this.jSpinnerLowPassOrder.setValue(prefs.getInt("jSpinnerLowPassOrder",1));
        this.jComboBoxLowPassFilterPhase.setSelectedIndex(prefs.getInt("jComboBoxLowPassFilterPhase",0));
                
        this.jSpinnerFilterLength.setValue(prefs.getInt("jSpinnerFilterLength",2));
        this.jCheckBoxFilterLength.setSelected(prefs.getBoolean("jCheckBoxFilterLength",true));
        this.jSpinnerFilterGroupDelay.setValue(prefs.getInt("jSpinnerFilterGroupDelay", 0));
        this.jCheckBoxFilterGroupDelay.setSelected(prefs.getBoolean("jCheckBoxFilterGroupDelay",true));
                
       // this.jLabelLatencyValue.setText(prefs.get("jLabelLatencyValue", ""));
        
        this.jComboBoxWindowing.setSelectedIndex(prefs.getInt("jComboBoxWindowing",0));
        this.jSpinnerWindowParam.setValue(prefs.getDouble("jSpinnerWindowParam", 0.5));
    }
    
    private void saveSettings() {
        prefs.putInt("jComboBoxSamplingFrequency", this.jComboBoxSamplingFrequency.getSelectedIndex());
        
        prefs.putInt("jComboBoxFilterType1", this.jComboBoxFilterType1.getSelectedIndex());
        prefs.putInt("jComboBoxFilterType2", this.jComboBoxFilterType2.getSelectedIndex());
        
        prefs.putDouble("jSpinnerHighPassFc", Double.parseDouble(this.jSpinnerHighPassFc.getValue().toString()));
        prefs.putInt("jSpinnerHighPassOrder", Integer.parseInt(this.jSpinnerHighPassOrder.getValue().toString()));
        prefs.putInt("jComboBoxHighPassFilterPhase", this.jComboBoxHighPassFilterPhase.getSelectedIndex());
        
        prefs.putDouble("jSpinnerLowPassFc", Double.parseDouble(this.jSpinnerLowPassFc.getValue().toString()));
        prefs.putInt("jSpinnerLowPassOrder", Integer.parseInt(this.jSpinnerLowPassOrder.getValue().toString()));
        prefs.putInt("jComboBoxLowPassFilterPhase", this.jComboBoxLowPassFilterPhase.getSelectedIndex());
        
        prefs.putInt("jSpinnerFilterLength", Integer.parseInt(this.jSpinnerFilterLength.getValue().toString()));
        prefs.putBoolean("jCheckBoxFilterLength", this.jCheckBoxFilterLength.isSelected());
        prefs.putInt("jSpinnerFilterGroupDelay", Integer.parseInt(this.jSpinnerFilterGroupDelay.getValue().toString()));
        prefs.putBoolean("jCheckBoxFilterGroupDelay", this.jCheckBoxFilterGroupDelay.isSelected());
        
       // prefs.put("jLabelLatencyValue", this.jLabelLatencyValue.getText());
        
        prefs.putInt("jComboBoxWindowing", this.jComboBoxWindowing.getSelectedIndex());
        prefs.putDouble("jSpinnerWindowParam", Double.parseDouble(this.jSpinnerWindowParam.getValue().toString()));
    }
    
    private void commitEditSpinners() {
        try {
            this.jSpinnerHighPassFc.commitEdit();
            this.jSpinnerHighPassOrder.commitEdit();
            
            this.jSpinnerLowPassFc.commitEdit();
            this.jSpinnerLowPassOrder.commitEdit();
            
            this.jSpinnerFilterLength.commitEdit();
            this.jSpinnerFilterGroupDelay.commitEdit();
            
            this.jSpinnerWindowParam.commitEdit();
        }
        catch(ParseException e) {
            
        }
    }
    
    private void exit() {
        if(DEBUG_MODE) System.out.println("Exiting...");
        commitEditSpinners();
        saveSettings();
        super.dispose();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FreeFirFilterGeneratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FreeFirFilterGeneratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FreeFirFilterGeneratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FreeFirFilterGeneratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FreeFirFilterGeneratorForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JCheckBox jCheckBoxFilterGroupDelay;
    private javax.swing.JCheckBox jCheckBoxFilterLength;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBoxFilterType1;
    private javax.swing.JComboBox jComboBoxFilterType2;
    private javax.swing.JComboBox jComboBoxHighPassFilterPhase;
    private javax.swing.JComboBox jComboBoxLowPassFilterPhase;
    private javax.swing.JComboBox jComboBoxSamplingFrequency;
    private javax.swing.JComboBox jComboBoxWindowing;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelConvolutionLatencyValue;
    private javax.swing.JLabel jLabelFilterLength;
    private javax.swing.JLabel jLabelFilterType;
    private javax.swing.JLabel jLabelHighPassFc;
    private javax.swing.JLabel jLabelHighPassFilterPhase;
    private javax.swing.JLabel jLabelHighPassOrder;
    private javax.swing.JLabel jLabelLatency;
    private javax.swing.JLabel jLabelLatency1;
    private javax.swing.JLabel jLabelLatency2;
    private javax.swing.JLabel jLabelLatencyUnit;
    private javax.swing.JLabel jLabelLatencyUnit1;
    private javax.swing.JLabel jLabelLowPassFc;
    private javax.swing.JLabel jLabelLowPassFilterPhase;
    private javax.swing.JLabel jLabelLowPassOrder;
    private javax.swing.JLabel jLabelSamplingFrequency;
    private javax.swing.JLabel jLabelTotalLatencyValue;
    private javax.swing.JLabel jLabelWindowing;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenuAbout;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuSaveFilterImpulseResponse;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelHighPass;
    private javax.swing.JPanel jPanelLowPass;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinnerFilterGroupDelay;
    private javax.swing.JSpinner jSpinnerFilterLength;
    private javax.swing.JSpinner jSpinnerHighPassFc;
    private javax.swing.JSpinner jSpinnerHighPassOrder;
    private javax.swing.JSpinner jSpinnerLowPassFc;
    private javax.swing.JSpinner jSpinnerLowPassOrder;
    private javax.swing.JSpinner jSpinnerWindowParam;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private static class selectlater implements Runnable
    {
        JSpinner comp;
        selectlater(JSpinner src)
        {
            comp = src;
        }
        public void run()
        {
            //System.out.println(" ... select all now");
            //System.out.println("Selecting text : " + ((JSpinner.DefaultEditor)comp.getEditor()).getTextField().getText());
            ((JSpinner.NumberEditor)comp.getEditor()).getTextField().selectAll();
        }
    }
}
